[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float THICCNESS : hint_range(0.0,1.0) = 0.5;
uniform float LOD : hint_range(-2.,2.) = 0.;

float smooth_sample(in sampler2D sampler, in vec2 uv) {
	//return texture(sampler, uv).a > 0.5 ? 1. : 0.;
	vec2 offset = 1. / vec2(textureSize(sampler, 0));
	
	float accum = 0.;
	float lod = LOD;
	accum += texture(sampler, uv - offset * vec2(1.,0.), lod).a;
	accum += texture(sampler, uv - offset * vec2(-1.,0.),lod).a;
	accum += texture(sampler, uv - offset * vec2(0.,1.),lod).a;
	accum += texture(sampler, uv - offset * vec2(0.,-1.),lod).a;
	accum += texture(sampler, uv - offset * vec2(1.,1.),lod).a;
	accum += texture(sampler, uv - offset * vec2(-1.,1.),lod).a;
	accum += texture(sampler, uv - offset * vec2(-1.,-1.),lod).a;
	accum += texture(sampler, uv - offset * vec2(1.,-1.),lod).a;
	/*
	accum += texture(sampler, uv - offset * vec2(1.,0.)).a;
	accum += texture(sampler, uv - offset * vec2(-1.,0.)).a;
	accum += texture(sampler, uv - offset * vec2(0.,1.)).a;
	accum += texture(sampler, uv - offset * vec2(0.,-1.)).a;
	accum += texture(sampler, uv - offset * vec2(1.,1.)).a;
	accum += texture(sampler, uv - offset * vec2(-1.,1.)).a;
	accum += texture(sampler, uv - offset * vec2(-1.,-1.)).a;
	accum += texture(sampler, uv - offset * vec2(1.,-1.)).a;
	*/
	return accum > (THICCNESS * 8.) ? 1. : 0.;
}

void fragment() {
	COLOR = texture(TEXTURE, UV);
	
	vec2 offset = vec2(dFdx(UV.x),dFdy(UV.y))/2.;
	
	float accum = 0.;
	accum += smooth_sample(TEXTURE, UV - offset * vec2(1.,0.));
	accum += smooth_sample(TEXTURE, UV - offset * vec2(-1.,0.));
	accum += smooth_sample(TEXTURE, UV - offset * vec2(0.,1.));
	accum += smooth_sample(TEXTURE, UV - offset * vec2(0.,-1.));
	
	COLOR.a = accum/4.;
}"

[resource]
shader = SubResource( 1 )
shader_param/THICCNESS = 0.5
shader_param/LOD = -2.0
